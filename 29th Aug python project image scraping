https://drive.google.com/file/d/1eYdZHwR9QZBAxS7XWsjbJdRTLgM24QvK/view?usp=sharing

https://chromedriver.chromium.org/downloads

challenge PDF - https://drive.google.com/file/d/1UcmG5-QLQKz57iyY6g6v9vLrmVZ4LIWf/view?usp=sharing

For challenge submission - https://docs.google.com/forms/d/e/1FAIpQLSeYPTJkFaZt0eN-aoI78-kmo81GDZCs5UeURXN032K2rccU7g/viewform

import os
import time
import requests
from selenium import webdriver   # it can b used to automate browsers, it can open google chrome automatically

import warnings
warnings.filterwarnings('ignore')

def fetch_image_urls(query: str, max_links_to_fetch: int, wd: webdriver, sleep_between_interactions: int = 1):
    def scroll_to_end(wd):
        wd.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(sleep_between_interactions)

    # Google Search Link

    search_url = "https://www.google.com/search?safe=off&site=&tbm=isch&source=hp&q={q}&oq={q}&gs_l=img"

    # load the page
    wd.get(search_url.format(q=query))
    wd.implicitly_wait(30)

    image_urls = set() # collect all the url of images 
    image_count = 0    
    results_start = 0
    while image_count < max_links_to_fetch:
        scroll_to_end(wd)

        # get all image thumbnail results
        
        thumbnail_results = wd.find_elements_by_css_selector("img.Q4LuWd")
        number_results = len(thumbnail_results)

        print(f"Found: {number_results} search results. Extracting links from {results_start}:{number_results}")

        for img in thumbnail_results[results_start:number_results]:
            try:
                img.click()
                time.sleep(sleep_between_interactions)
            except Exception:
                continue

            # extract image url
            actual_images = wd.find_elements_by_css_selector('img.n3VNCb')
            for actual_image in actual_images:
                if actual_image.get_attribute('src') and 'http' in actual_image.get_attribute('src'):
                    image_urls.add(actual_image.get_attribute('src'))

            image_count = len(image_urls)

            if len(image_urls) >= max_links_to_fetch:
                print(f"Found: {len(image_urls)} image links, done!")
                break
        else:
            print("Found:", len(image_urls), "image links, looking for more ...")
            time.sleep(30)
            return
            load_more_button = wd.find_element_by_css_selector(".mye4qd")
            if load_more_button:
                wd.execute_script("document.querySelector('.mye4qd').click();")

        results_start = len(thumbnail_results)

    return image_urls

#flowing fn to store images in a hierarchy/  into a databases

def persist_image(folder_path:str,url:str, counter):
    try:
        image_content = requests.get(url).content

    except Exception as e:
        print(f"ERROR - Could not download {url} - {e}")

    try:
        f = open(os.path.join(folder_path, 'jpg' + "_" + str(counter) + ".jpg"), 'wb')
        f.write(image_content)
        f.close()
        print(f"SUCCESS - saved {url} - as {folder_path}")
    except Exception as e:
        print(f"ERROR - Could not save {url} - {e}")

#flowing fn to search for and download it, this fn is taking 4 parameter, 1st search_term: str, target_path = './images means it will save pictures in this directory ex images folder 
def search_and_download(search_term: str, driver_path: str, target_path='./images', number_images=10):
    target_folder = os.path.join(target_path, '_'.join(search_term.lower().split(' '))) '''#target_folder is a variable we ar tryng to create'''
    if not os.path.exists(target_folder):
        os.makedirs(target_folder)   # makedirs means create a directory

    with webdriver.Chrome(executable_path=driver_path) as wd:  # webdriver we get from seleum class, it will load drivers from chrome driver.exe file , wd is just a alias
        res = fetch_image_urls(search_term, number_images, wd=wd, sleep_between_interactions=0.5)

    counter = 0
    for elem in res:
        persist_image(target_folder, elem, counter)
        counter += 1


# How to execute this code
# Step 1 : pip install selenium. pillow, requests
# Step 2 : make sure you have chrome installed on your machine
# Step 3 : Check your chrome version ( go to three dot then help then about google chrome )
# Step 4 : Download the same chrome driver from here  " https://chromedriver.storage.googleapis.com/index.html "
# Step 5 : put it inside the same folder of this code


DRIVER_PATH = r'chromedriver.exe'
search_term = 'sudhanshu ineuron'
# num of images you can pass it from here  by default it's 10 if you are not passing
#number_images = 50
search_and_download(search_term=search_term, driver_path=DRIVER_PATH, number_images=10)


#terminal e directory thik korar jonno : conda activate base 
#conda activate imgscrap




